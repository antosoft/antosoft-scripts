HOSTNAME=k8s-master1
DEV_NET=ens18
HOST_IPV4=192.168.100.11
HOST_GW=192.168.100.254
HOST_DNS1=1.1.1.1
HOST_DNS2=8.8.8.8
SUFIX_HOSTNAME=antosoft.net
PROFILE_FILE='/etc/profile'
HOSTNAME_FILE='/etc/hostname'
NETWORK_CONF_FILE='/etc/netplan/00-installer-config.yaml'  # ubuntu 20.04
HOSTS_FILE='/etc/hosts'
USER_NAME='antosoft'
SUDO_CONF_FILE='/etc/sudoers.d/90-antosoft-ubuntu'

#ADS_TOOLS="/var/shared/antosoft/scripts/ads_tools.sh"
ADS_TOOLS="ads_tools.sh"

LOCAL_TIME='America/Asuncion'
LOCALE_DEF='es_PY.UTF-8'

ALIAS_CONFIG='#---[begin: install_config setings]---
sudor="";
if [ $(id -u) -ne 0 ]; then
  sudor="sudo "
fi

alias la="ls -la"
alias ll="ls -l"
alias rm="${sudor}rm -i"
alias cp="${sudor}cp -i"
alias mv="${sudor}mv -i"
alias md="${sudor}mkdir -p"
alias ne="${sudor}/usr/bin/nano"
alias python="python3"
alias k0s="${sudor}/usr/local/bin/k0s"

if [[ "${sudor}" != "" ]]; then
  alias s="sudo"
fi
#---[end: install_config setings]---'

HOSTNAME_CONFIG="${HOSTNAME}.${SUFIX_HOSTNAME}"

HOSTS_CONFIG="127.0.0.1 localhost localhost.localdomain ${HOSTNAME}

${HOST_IPV4} ${HOSTNAME}.${SUFIX_HOSTNAME}"

NETWORK_CONFIG="network:
  ethernets:
    ${DEV_NET}:
      addresses:
      - ${HOST_IPV4}/24
      nameservers:
        addresses:
        - ${HOST_DNS1}
        - ${HOST_DNS2}
        search:
        - ${SUFIX_HOSTNAME}
      routes:
      - to: default
        via: ${HOST_GW}
  version: 2"

SUDO_CONFIG="${USER_NAME} ALL=(ALL) NOPASSWD:ALL"


SSH_SERVICE='sshd'
#SSH_SERVICE='ssh.service'
SSH_CONF_FILE='/etc/ssh/ssh_config'
SSHD_CONF_FILE='/etc/ssh/sshd_config'
SSH_CONFIG="Include /etc/ssh/ssh_config.d/*.conf
Host *
    SendEnv LANG LC_*
    HashKnownHosts yes
    GSSAPIAuthentication yes"
SSHD_CONFIG="Include /etc/ssh/sshd_config.d/*.conf
Port 7722
ListenAddress ${HOST_IPV4}
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 30
PermitRootLogin yes
StrictModes yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys .ssh/authorized_keys2
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
PrintLastLog yes
AcceptEnv LANG LC_*
Subsystem       sftp    /usr/lib/openssh/sftp-server"

NTP_CONF_FILE='/etc/systemd/timesyncd.conf'
NTP_CONFIG="[Time]
NTP=1.py.pool.ntp.org
#FallbackNTP=ntp.ubuntu.com
#RootDistanceMaxSec=5
#PollIntervalMinSec=32
#PollIntervalMaxSec=2048"


SUB_ALIAS=("alias" "${PROFILE_FILE}" "${ALIAS_CONFIG}" "verifyAdd" "--")
SUB_HOSTNAME=("hostname" "${HOSTNAME_FILE}" "${HOSTNAME_CONFIG}" "overWrite" "--")
SUB_HOSTS=("hosts" "${HOSTS_FILE}" "${HOSTS_CONFIG}" "overWrite" "--")
SUB_NETWORK=("network" "${NETWORK_CONF_FILE}" "${NETWORK_CONFIG}" "overWrite" "--")
SUB_SUDO=("sudo" "${SUDO_CONF_FILE}" "${SUDO_CONFIG}" "overWrite" "--")

SUB_SSHD=("sshd" "${SSHD_CONF_FILE}" "${SSHD_CONFIG}" "overWrite" "--")
SUB_SSH=("ssh" "${SSH_CONF_FILE}" "${SSH_CONFIG}" "overWrite" SUB_SSHD[@])
SUB_NTP=("ntp" "${NTP_CONF_FILE}" "${NTP_CONFIG}" "overWrite" "--")


# Lista de paquetes a instalar, previa verificacion de si es necesario...
# ["SO o any"]["Binario del App o -"]["Fullname|Mensaje para el usuario"]["Lista de comandos para la Instalacion"]["lista de comandos adicionales o -"]
MC1=("debian" "mc" 'Midnight Commander' '${SUDOR}${PAKMAN} install mc -y' "--" )
MC2=("rhel" "mc" 'Midnight Commander' "config-manager --set-enabled crb|${SUDOR}${PAKMAN} install epel-release -y|${SUDOR}${PAKMAN} install mc -y" "--")
NANO=("any" "nano" 'Nano Editor' '${SUDOR}${PAKMAN} install nano -y' "--")
CLEAR=("any" "clear" 'Clear Command' '${SUDOR}${PAKMAN} install ncurses -y' "--")
TAR=("any" "tar" 'Tar Tool' '${SUDOR}${PAKMAN} install tar -y' "--")
WGET=("any" "wget" 'WGet Tool' '${SUDOR}${PAKMAN} install wget -y' "--")
CURL=("any" "curl" 'Curl Tool' '${SUDOR}${PAKMAN} install curl -y' "--")
NFS1=("debian" "--" 'nfs-common' '${SUDOR}${PAKMAN} install nfs-common -y' "--")
NFS2=("rhel" "--" 'nfs-utils' '${SUDOR}${PAKMAN} install nfs-utils -y' "--")
ISCSI1=("debian" "--" 'open-iscsi' '${SUDOR}${PAKMAN} install open-iscsi -y' "--")
ISCSI2=("rhel" "--" 'iscsi-initiator-utils' '${SUDOR}${PAKMAN} install iscsi-initiator-utils -y' "systemctl start iscsid|systemctl enable iscsid")
LVM2=("any" "--" 'lvm2' '${SUDOR}${PAKMAN} install lvm2 -y' "--")


# Actualizacion e instalaciones adicionales...
# ["SO o any"]["lista de comandos"]["Mensaje1"]["Mensaje2"]
UPDATE=("debian" '${SUDOR}${PAKMAN} update -y' 'Do you want to update packages' '"Updating packages..."' '"Update completed!"')



# [Color] [Message] [Command]
SUB_SSHKEY=(
  '"${BI_PURPLE}"',
  '"Generating rsa key:" $(t /etc/ssh/ssh_host_rsa_key ${B_WHITE})...', 
  '${SUDOR}ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -q -N ""',
  '"${BI_PURPLE}"',
  '"Generating ed25519 key:" $(t /etc/ssh/ssh_host_ed25519_key ${B_WHITE})...',
  '${SUDOR}ssh-keygen -t ed25519  -f /etc/ssh/ssh_host_ed25519_key -q -N ""',
  '"${BI_PURPLE}"',
  '"Generating ecdsa key:" $(t /etc/ssh/ssh_host_ecdsa_key ${B_WHITE})...',
  '${SUDOR}ssh-keygen -t ecdsa -b 521 -f /etc/ssh/ssh_host_ecdsa_key -q -N ""',
  '"${BI_PURPLE}"',
  '"Generating dsa key:" $(t /etc/ssh/ssh_host_dsa_key ${B_WHITE})...',
  '${SUDOR}ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -q -N ""',
  '--',
  '--',
  '${SUDOR}cp /etc/ssh/ssh_host_rsa_key /root/.ssh/id_rsa >/dev/null 2>&1',
  '--',
  '--',
  '${SUDOR}cp /etc/ssh/ssh_host_rsa_key.pub /root/.ssh/id_rsa.pub >/dev/null 2>&1',
  '--',
  '--',
  'RESTART_SSH_OR_NOT=yy'
)



# Settings adicionales...
# ["SO o any"]["BEFORE o --"]["lista de comandos"]["Mensaje1"]["Mensaje2"]["Mensaje3"]["AFTER o --"]["SUB CONFIG O --"]
SSH_START=(
  'any'
  '--'
  '${SUDOR}systemctl start ${SSH_SERVICE}|${SUDOR}systemctl daemon-reload|${SUDOR}systemctl enable ${SSH_SERVICE}'
  '${RESTART_SSH_OR_NOT}'
  '"Restarting and enabling ssh server..."'
  '"The ssh server is restarted and enabled!"'
  '--'
  '--'
)
MACHINE_ID1=(
  'debian'
  'curmachineid=$(cat /etc/machine-id)|${SUDOR}rm -fr /etc/machine-id'
  '${SUDOR}rm -fr /var/lib/dbus/machine-id|${SUDOR}dbus-uuidgen --ensure=/etc/machine-id|machineid=$(cat /etc/machine-id)|${SUDOR}echo $machineid > /var/lib/dbus/machine-id'
  'Do you want change the machine-id'
  '"Changing the machine-id:" $(t ${curmachineid} ${B_WHITE})'
  '"The machine-id changed by:" $(t ${machineid} ${B_WHITE})'
  '--'
  '--'
)
MACHINE_ID2=(
  'rhel'
  'curmachineid=$(cat /etc/machine-id)|${SUDOR}rm -fr /etc/machine-id'
  '${SUDOR}systemd-machine-id-setup|machineid=$(cat /etc/machine-id)'
  'Do you want change the machine-id'
  '"Changing the machine-id:" $(t ${curmachineid} ${B_WHITE})'
  '"The machine-id changed by:" $(t ${machineid} ${B_WHITE})'
  '--'
  '--'
)
LOCALTIME=(
  'any'
  '--'
  '${SUDOR}rm -rf /etc/localtime|${SUDOR}ln -s /usr/share/zoneinfo/${LOCAL_TIME} /etc/localtime'
  'Do you want to set timezone'
  '--'
  '"Setting timezone:" $(t ${LOCAL_TIME} ${B_WHITE})'
  '--'
  '--'
)
LANGUAGE1=(
  'rhel'
  'SET_DEF_LOCALE=yy'
  '${SUDOR}${PAKMAN} install glibc-langpack-es -y'
  'Do you want to install language packs'
  '"Installing language packs..."'
  '--'
  '--'
  '--'
)
LANGUAGE2=(
  'debian'
  'SET_DEF_LOCALE=yy'
  '${SUDOR}${PAKMAN} install locales -y|${SUDOR}locale-gen ${LOCALE_DEF}'
  'Do you want to install language packs'
  '"Installing language packs..."'
  '--'
  '--'
  '--'
)
LANGUAGE3=(
  'any'
  '--'
  '${SUDOR}localectl set-locale LANG=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_CTYPE=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_NUMERIC=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_TIME=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_COLLATE=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_MONETARY=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_MESSAGES=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_PAPER=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_NAME=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_ADDRESS=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_TELEPHONE=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_MEASUREMENT=${LOCALE_DEF}|
  ${SUDOR}localectl set-locale LC_IDENTIFICATION=${LOCALE_DEF}'
  '${SET_DEF_LOCALE}'
  '--'
  '"Setting default lenguaje to:" [$(t ${LOCALE_DEF} ${B_WHITE})]...'
  '--'
  '--'
)

SSH_GENKEYS=(
  'any'
  '--'
  '${SUDOR}systemctl stop ${SSH_SERVICE}|${SUDOR}rm -fr /etc/ssh/bk >/dev/null 2>&1|${SUDOR}mkdir -p /etc/ssh/bk >/dev/null 2>&1|${SUDOR}mv -f /etc/ssh/ssh_host_rsa_key /etc/ssh/bk/ >/dev/null 2>&1|${SUDOR}mv -f /etc/ssh/ssh_host_ed25519_key /etc/ssh/bk/ >/dev/null 2>&1|${SUDOR}mv -f /etc/ssh/ssh_host_ecdsa_key /etc/ssh/bk/ >/dev/null 2>&1|${SUDOR}mv -f /etc/ssh/ssh_host_dsa_key /etc/ssh/bk/ >/dev/null 2>&1'
  'Do you want to generate new keys for openssh'
  '"Stopping openssh server..."'
  '"Starting openssh server..."'
  '${SUDOR}systemctl start ${SSH_SERVICE}'
  SUB_SSHKEY[@]
)

CONFIG_DATA=(
  SUB_ALIAS[@]
  SUB_HOSTNAME[@]
  SUB_HOSTS[@]
  SUB_NETWORK[@]
  SUB_SUDO[@]
  SUB_SSH[@]
  SUB_NTP[@]
)

CONFIG_EXTRA=(
  SSH_START[@]
  MACHINE_ID1[@]
  MACHINE_ID2[@]
  LOCALTIME[@]
  LANGUAGE1[@]
  LANGUAGE2[@]
  LANGUAGE3[@]
  SSH_GENKEYS[@]
)

CONFIG_SETS=(
  UPDATE[@]
)

CONFIG_APPS=(
  MC1[@]
  MC2[@]
  NANO[@]
  CLEAR[@]
  TAR[@]
  WGET[@]
  CURL[@]
  NFS1[@]
  NFS2[@]
  ISCSI1[@]
  ISCSI2[@]
  LVM2[@]
)

# TODO: firewall-cmd configs
# 
# Clean system and reboot
# sudo apt-get autoclean && sudo apt-get clean && sudo apt-get autoremove && sudo reboot
